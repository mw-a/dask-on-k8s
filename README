Steps to create environment:

- optionally add nginx ingress controller for gitlab and keycloak (because
  gitlab insists on TLS connections)

helm upgrade --install nginx-ingress-controller bitnami/nginx-ingress-controller --values=nginx-ingress.yaml

- install keycloak

helm upgrade --install keycloak bitnami/keycloak --values=keycloak.yaml

- add minio public client to keycloak
- add policy attribute to users allowed to use minio and add attribute mapper
  to minio client to allow access to minio using OpenID Connect
- adjust MINIO_IDENTITY_OPENID_CONFIG_URL minio.yaml to keycloak endpoint

helm upgrade --install minio minio/minio --values=minio.yaml

- add gitlab

helm upgrade --install gitlab gitlab/gitlab --values=gitlab.yaml

- create a confidential gitlab client in keycloak and create a k8s secret
  containing the client secret for gitlab to use

kubectl create secret generic gitlab-keycloak-oidc --from-file=provider=gitlab-keycloak-oidc-secret.yaml

- add confidential jupyter client to keycloak
- adjust dask.yaml with actual endpoints and client secret of jupyter, keycloak and minio. here:
  - .90 - jupyter
  - .91 - keycloak
  - .92 - minio

jupyterhub:
  hub:
    extraEnv:
      OAUTH_CALLBACK_URL: "http://192.168.122.90/hub/oauth_callback"
      OAUTH2_AUTHORIZE_URL: "http://192.168.122.91/auth/realms/example.org/protocol/openid-connect/auth"
      OAUTH2_TOKEN_URL: "http://192.168.122.91/auth/realms/example.org/protocol/openid-connect/token"
    extraConfig:
      oauth2.py: |
[...]
                    endpoint_url='http://192.168.122.92',
[...]
        c.KubeGenericOAuthenticator.client_id = "jupyter"
        c.KubeGenericOAuthenticator.client_secret = "5f143785-8c14-4405-8281-e4318683223e"
        c.KubeGenericOAuthenticator.token_url = "http://192.168.122.91/auth/realms/example.org/protocol/openid-connect/token"
        c.KubeGenericOAuthenticator.userdata_url = "http://192.168.122.91/auth/realms/example.org/protocol/openid-connect/userinfo"

helm upgrade --install --render-subchart-notes dhub .
