---
gssproxy:
  debug_level: 3
  services:
    # NOTE: service drop file names need to start with two digits and dash for
    # gssproxy to accept them
    50-jupyter:
      configFile: "files/gssproxy/jupyter.conf"
      # object needs to be granted delegation to any protocol in AD
      keytabFile: "files/gssproxy/jupyter.keytab"

jupyter:
  krb5ConfigFile: "files/krb5.conf"
  extraConfigFiles:
    10-gitlabcreds.py: "files/jupyterhub/gitlabcreds.py"
    20-githubcreds.py: "files/jupyterhub/githubcreds.py"
    30-kubeoauth.py: "files/jupyterhub/kubeoauth.py"

daskhub:
  jupyterhub:
    proxy:
      secretToken: "88c3c97ba7e69593b661f4bb0ba3f28395c81dd8297ae859d3d39c81bdc982a1"
  #    chp:
  #      extraCommandLineFlags:
  #      - --log-level=debug
    singleuser:
      image:
        # s3fs
        name: mwa4/base-notebook
        tag: "21"
        # alternatively with conda krb5, needs gssproxy:1.0.12-fedora below for now:
        #tag: 20-conda-krb5
      extraEnv:
        GSS_USE_PROXY: "yes"
        GSSPROXY_SOCKET: "/run/gssproxy/jupyter.sock"
      storage:
        extraVolumeMounts:
        - name: krb5-config
          mountPath: "/etc/krb5.conf"
          subPath: "krb5.conf"
          readOnly: true
        - name: gssproxy-sockets
          mountPath: /run/gssproxy
        extraVolumes:
        - name: krb5-config
          configMap:
            name: krb5-config
        - name: gssproxy-configs
          configMap:
            name: gssproxy-configs
        - name: gssproxy-keytabs
          secret:
            secretName: gssproxy-keytabs
        - name: gssproxy-sockets
          emptyDir: {}
      extraContainers:
      - name: gssproxy
        image: mwa4/gssproxy:1.0.12
        #image: mwa4/gssproxy:1.0.12-fedora
        volumeMounts:
        - name: krb5-config
          mountPath: "/etc/krb5.conf"
          subPath: "krb5.conf"
          readOnly: true
        - name: gssproxy-sockets
          mountPath: /run/gssproxy
        - name: gssproxy-configs
          mountPath: /etc/gssproxy
          readOnly: true
        - name: gssproxy-keytabs
          mountPath: /secrets/keytabs
          readOnly: true
      # stolen from https://gitlab.com/gitlab-org/gitlab-foss/-/blob/master/vendor/jupyter/values.yaml
      lifecycleHooks:
        postStart:
          exec:
            command:
              - "sh"
              - "-c"
              # the git credentials secret must be mounted without subPath to
              # get atomic updates. Therefore we need to point to the right
              # subPath using a symlink ourselves.
              - >
                git config --global credential.helper store;
                [ -L /home/jovyan/.config/jupyter/git-credentials/git-credentials ] && ln -sfn /home/jovyan/.config/jupyter/git-credentials/git-credentials /home/jovyan/.git-credentials;
                [ -z "${USER_EMAIL}" ] || git config --global user.email "${USER_EMAIL}";
                [ -z "${USER_REAL_NAME}" ] || git config --global user.name "${USER_REAL_NAME}";

    hub:
      config:
        Authenticator:
          allowed_users:
          - oauthuser
          - admin
          admin_users:
          - admin
      image:
        # boto3
        name: mwa4/k8s-hub
        tag: 1.1.3-boto3
      # prevent timeouts on callbacks from dask gateway into jupyterhub because
      # of active network policy
      # https://github.com/dask/helm-chart/issues/142
      networkPolicy:
        enabled: false
      services:
        dask-gateway:
          apiToken: "77a50bc4cac5e26c0a6423748318e37f1db2416476abb9733de58508781f8e72"
      extraEnv:
        OAUTH_CALLBACK_URL: "http://192.168.122.90/hub/oauth_callback"
        OAUTH2_AUTHORIZE_URL: "http://192.168.122.91/auth/realms/example.org/protocol/openid-connect/auth"
        OAUTH2_TOKEN_URL: "http://192.168.122.91/auth/realms/example.org/protocol/openid-connect/token"
        # adjust! openssl rand -hex 32
        JUPYTERHUB_CRYPT_KEY: "114903f5d652fe7e3cc3fe51e3e60f4899a6ddc18b891cfbed68e294f40085cf"
      extraVolumes:
      - name: extra-config-files
        configMap:
          name: hub-extra-config-files
      extraVolumeMounts:
      - name: extra-config-files
        mountPath: "/usr/local/etc/jupyterhub/jupyterhub_config.d"
        readOnly: true
      extraConfig:
        90-oauth2.py: |
          # enable persisting auth state for refresh of tokens and transporting service tokens
          c.Authenticator.enable_auth_state = True
          c.Authenticator.refresh_pre_spawn = True
          # very aggressive refresh setting for testing, updates are only
          # done on non-api requests, though
          c.Authenticator.auth_refresh_age = 30

          c.JupyterHub.authenticator_class = KubeGenericOAuthenticator

          c.KubeGenericOAuthenticator.login_service = "keycloak"
          c.KubeGenericOAuthenticator.client_id = "jupyter"
          c.KubeGenericOAuthenticator.client_secret = "5f143785-8c14-4405-8281-e4318683223e"
          c.KubeGenericOAuthenticator.token_url = "http://192.168.122.91/auth/realms/example.org/protocol/openid-connect/token"
          c.KubeGenericOAuthenticator.userdata_url = "http://192.168.122.91/auth/realms/example.org/protocol/openid-connect/userinfo"
          c.KubeGenericOAuthenticator.userdata_method = 'GET'
          c.KubeGenericOAuthenticator.userdata_params = {'state': 'state'}
          c.KubeGenericOAuthenticator.username_key = 'preferred_username'

          c.KubeGenericOAuthenticator.minio_endpoint_url = 'http://192.168.122.92'

          c.KubeGenericOAuthenticator.gitlab_host = "gitlab.example.org"
          c.KubeGenericOAuthenticator.gitlab_client_id = "<id>"
          c.KubeGenericOAuthenticator.gitlab_client_secret = "<secret>"

          # differences between Github and OAuth apps for our use-case:
          # - only Github apps support PKCE
          # - only Github apps receive refresh tokens, access tokens for OAuth
          #   apps remain valid until explicitly revoked sideband!
          # - HTTPS URL for cloning is different: Github apps use username
          #   x-access-token and the access token as password while OAuth apps
          #   use the token as username.
          # - Github apps must use an installation access token for git clone
          # - conclusion: Github apps have the more desireable and complete
          #   featureset OAuth2-wise but also restrictions tailored towards
          #   custom apps rather than developer access.
          c.KubeGenericOAuthenticator.github_client_id = "<id>"
          c.KubeGenericOAuthenticator.github_client_secret = "<secret>"
          #c.KubeGenericOAuthenticator.github_client_id = "<id>"
          #c.KubeGenericOAuthenticator.github_client_secret = "<secret>"


  dask-gateway:
  #  traefik:
  #    loglevel: DEBUG
  #     dashboard: true
    gateway:
  #    loglevel: DEBUG
      auth:
  #      type: jupyterhub
        jupyterhub:
          apiToken: "77a50bc4cac5e26c0a6423748318e37f1db2416476abb9733de58508781f8e72"
      extraConfig:
        user-credentials: |
          from dask_gateway_server.options import Options

          def options_handler(options, user):
              if 'envFrom' not in c.KubeClusterConfig.worker_extra_container_config:
                  c.KubeClusterConfig.worker_extra_container_config['envFrom'] = []

              c.KubeClusterConfig.worker_extra_container_config['envFrom'].append({
                      'secretRef': {
                          'name': "jupyter-secrets-%s" % user.name,
                      }
                  })

              for cont in c.KubeClusterConfig.worker_extra_pod_config['containers']:
                if cont['name'] != "gssproxy":
                  continue

                if 'env' not in cont:
                  cont['env'] = []

                cont['env'].append({
                  'name': 'GSSPROXY_CREATE_USERS',
                  'value': '%s=1000' % user.name})

              return {}

          c.Backend.cluster_options = Options(handler=options_handler)

      backend:
        image:
          # s3fs
          name: mwa4/dask-gateway
          tag: 8
        scheduler:
          cores:
            request: 0.1
            limit: 1
          memory:
            request: "100M"
            limit: "2G"
        worker:
          cores:
            request: 0.1
            limit: 1
          memory:
            request: "100M"
            limit: "2G"
          extraContainerConfig:
            env:
            - name: GSS_USE_PROXY
              value: "yes"
            - name: GSSPROXY_SOCKET
              value: "/run/gssproxy/jupyter.sock"
            volumeMounts:
            - name: krb5-config
              mountPath: "/etc/krb5.conf"
              subPath: "krb5.conf"
              readOnly: true
            - name: gssproxy-sockets
              mountPath: /run/gssproxy
          extraPodConfig:
            volumes:
            - name: krb5-config
              configMap:
                name: krb5-config
            - name: gssproxy-configs
              configMap:
                name: gssproxy-configs
            - name: gssproxy-keytabs
              secret:
                secretName: gssproxy-keytabs
            - name: gssproxy-sockets
              emptyDir: {}
            containers:
            - name: gssproxy
              image: mwa4/gssproxy:1.0.12
              volumeMounts:
              - name: krb5-config
                mountPath: "/etc/krb5.conf"
                subPath: "krb5.conf"
                readOnly: true
              - name: gssproxy-sockets
                mountPath: /run/gssproxy
              - name: gssproxy-configs
                mountPath: /etc/gssproxy
                readOnly: true
              - name: gssproxy-keytabs
                mountPath: /secrets/keytabs
                readOnly: true
